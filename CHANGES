Platform 1.01

* Library updates
  - jmxutils to 1.18
  - findbugs-annotations to 2.0.3

Platform 1.00

* HttpServer

  We restored support for compressed request bodies. This had been removed in
  the Jetty 9 upgrade in Platform 0.91.

* JsonCodec

  We added JsonCodec.withoutPretty() which returns a JsonCodec that doesn't
  add whitespace to the encoded JSON.

* Assertions

  We added Assertions.assertNotContains() methods.

Platform 0.99

* HTTPClient

  - We have disabled following HTTP redirects by default. Redirects may be
    enabled per-request using Request.Builder.setFollowRedirects(true).

* HttpServiceSelector

  HttpServiceSelector is now deprecated. Code using it should be rewritten
  to use a BalancingHttpClient instead.

Platform 0.98

* JaCoCo replaces Cobertura

  We replaced Cobertura with JaCoCo. JaCoCo is now run by default in projects
  that use library or rest-server-base as a parent POM.

* TimeStat and SparseTimeStat

  - TimeStat and SparseTimeStat now export a Total metric.

  - We added a BlockTimer.timeTo() method for changing the stat object used
    to record the time.

* BoundedExecutor

  We added BoundedExecutor, which guarantees that no more than maxThreads will
  be used to execute tasks.

Platform 0.97

* Events

  - The event client now retries failed requests.
  - The Future returned from EventClient.post() now fails with
    UnexpectedResponseException when the collector service returns a failure
    response code.

Platform 0.96

* JMX

  - We no longer announce the "jmx" service to discovery.

  - We no longer enable remote JMX by default. Remote JMX may be enabled with
    the "jmx.enabled" config option.

* HttpClient

  This release fixes a couple of performance issues and bugs in the HttpClient:
    - The client was inadvertently requesting GZIP responses. We've disabled this
      behavior since it affects CPU utilization.
    - We've fixed an issue in the way the response buffers are managed that
      affects performance due to unnecessary resizing.
    - The maximum response size was hard-coded instead of using the existing
      config option.

* Library upgrade
  - Jetty to 9.1.4

Platform 0.95

* Reporting

  - We changed some metric names:

    - RequestStats.* renamed to HttpServer.*
    - DetailedRequestStats.RequestTime.* renamed to HttpServer.RequestTimeByCode.*
    - Failure.Count renamed to ServiceClient.Failure.Count
    - ResponseTime.* renamed to ServiceClient.RequestTime.*

  - We no longer report a MaxError metric from TimeStat and DistributionStat.

  - We no longer include a "package" tag in reported metrics.

  - We removed the HttpClient._BindingAnnotation_.Count metric as redundant.

* Stats

  We have deprecated CounterStat.update(long), replacing it by CounterStat.add(long)

  We created SparseCounterStat, etc. for use with report collections. These stats
  objects do not report any metrics for minutes in which no data were added to the
  object. They also do not export any attributes to JMX.

* Configuration

  The @ConfigMap annotation is no longer necessary and is deprecated.

Platform 0.94

* The launcher now invokes the JVM with the following default switches:

    -server
    -XX:+UseConcMarkSweepGC
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+AggressiveOpts
    -XX:+DoEscapeAnalysis
    -XX:+UseCompressedOops
    -XX:OnOutOfMemoryError=kill -9 %p

* We removed unnecessary features from the Rack launcher:

  - The rack launcher no longer copies the etc directory to rack/config
  - The rack config path is now always "rack/config.ru"
  - The rack environment is now always "production"

Platform 0.93

* Reverted the Hamcrest support in JsonTester.assertJsonEncode()

* Library upgrade
  - Jetty to 9.1.3

Platform 0.92

* We created TestingReportCollectionFactory

* JsonTester.assertJsonEncode() now supports Hamcrest matchers

Platform 0.91

* AsyncHttpClient collapsed into HttpClient

  - We moved the executeAsync() method into the HttpClient interface.
  - The AsyncHttpClient interface is now deprecated.
  - The AsyncHttpClient.AsyncHttpResponseFuture interface is now named
    HttpClient.HttpResponseFuture

* HttpClient uses Jetty

  We replaced the Apache and Netty HttpClient implementations with
  JettyHttpClient, a Jetty implementation.

* Configuration warnings are no longer sent to the event service upon startup.

* We added a Bootstrap.quiet() method to disable logging of configuration.

* We tightened the type bounds of Assertions.assertInstanceOf() to catch some
  errors at compile time.

* Library upgrades
  - Jetty to 9.1.2
  - JRuby to 1.7.11

* Maven plugin upgrades
  - maven-duplicate-finder-plugin 1.0.6

Platform 0.90

* JsonCodec

  The JsonCodec.jsonCodec() factory method now uses Guava's TypeToken rather than
  Guice's TypeLiteral. This backwards incompatible change allows using the json
  module without a dependency on Guice.

* TestingHttpServer now supports resources

* Library upgrades
  - Guava to 16.0.1
  - logback to 1.1.1
  - findbugs-annotations to 2.0.2
  - testng to 6.8.7

Platform 0.89

* [Bug] BalancingHttpClient no longer dequotes and requotes the URI.

* [Bug] HttpUriBuilder now quotes the '+' character.

Platform 0.88

* Bootstrap and Logging

  - Bootstrap now initializes logging before the withModules() call. Any
    test code that needs to call doNotInitializeLogging() now must do
    so before the withModules() call.

  - We modified the archetype Main classes to place the Bootstrap call inside
    the try block. This allows more startup exceptions to be logged. We
    recommend applications make a corresponding change to their Main class.

* We removed the deprecated Bootstrap.strictConfig() and
  ConfigurationFactory.getUsedProperties() methods.

* BalancingHttpClient now avoids concurrent calls to the same instance and
  uses discovery changes that happen after the first attempt.

* [Bug] BalancingHttpClient instances couldn't be configured.

* [Bug] JAX-RS response time reporting threw exceptions when a resource class
  had multiple methods with the same name.

* [Bug] The launcher wasn't disconnecting from the terminal upon server start.

Platform 0.87

* The node.pool configuration property now allows uppercase in pool names.

* Reporting

  - JAX-RS now reports response times per resource method and response code.
    JaxrsModule now depends on ReportingModule.

  - Permute reported metric names as necessary to make them acceptable to KairosDB

Platform 0.86

* Reporting

  - The reporting client now uses discovery. The "report.uri" configuration
    property has been removed.

  - Reporting is now enabled by default. It may be disabled with the
    "reporting.enabled" configuration property.

  - The "report.tags" configuration property has been renamed to
    "reporting.tags".

Platform 0.85

* [Bug] BalancingHttpClient preserve the query part of the URI

Platform 0.84

* Reporting (experimental)

  - The values of any "type" and "name" tags are used to prefix the metric
    name.

  - The http-client RequestStats are exposed to reporting.

* We added Threads.threadsNamed(String) and Threads.daemonThreadsNamed(String)
  methods to simplify creating a ThreadFactory.

* We added decayed total to Distribution

* We added merge support to CounterStat and DecayCounter

* [Bug] Ignore IOException in Closeables.closeQuietly()

* Library upgrades
  - validation-api to 1.1.0.Final
  - logback to 1.0.13

Platform 0.83

* Application name

  We've added a static factory for Bootstrap which takes the name of the
  application server:

    Bootstrap.bootstrapApplication("name-of-application")
        .withModules(...)

  The previous Bootstrap constructors are deprecated.

  The application name can be obtained from NodeInfo.getApplication().

  NodeModule and TestingNodeModule have a dependency on the newly created
  ApplicationNameModule. This dependency is supplied by Bootstrap.

  The application name is included in a tag named "application" in reported
  metrics.

* HttpServiceBalancer metrics

  HttpServiceBalancer now reports:
    - client response times by success/failure and target URI
    - failures by failure category and target URI

  DiscoveryModule now has a dependency on ReportingModule.

* TestingTicker

  TestingTicker now has public visibility in the testing package. It is an
  implementation of Ticker that can be manually incremented.

* Library upgrades
  - Guava to 15.0

Platform 0.82

* We added JaxrsBinder.bindResourceFilterFactory for adding custom
  ResourceFilterFactory instances to the HTTP server.

* The HTTP server no longer sends HttpRequest events.

Platform 0.81

* We made JAX-RS resource methods Bean-validate arguments of List and Map.

* JMX agent

  We've replaced the custom JMX agent in Platform by the one built into the
  JVM. This change makes it possible to use the VisualGC plugin for VisualVM
  when jstatd is also running in the same machine as the Platform-based
  process.

  As a result of this change, we've also removed the 'jmx.rmiserver.hostname'
  configuration option in favor of Java's native configuration option
  'java.rmi.server.hostname'.

* We demoted several legacy configuration properties to defunct. We renamed
  'discovery.uri' to 'testing.discovery.uri' to make it obvious that it should
  never be used in production.

* We added an experimental management wrapper for a thread pool executor.

* We added the ConfigurationAwareProvider interface to implementing custom
  configuration providers.

* We added byte array methods for JsonCodec.

* We added 1,5,10, and 25 percentiles to Distribution and added manual
  percentile specification to Distribution getPercentiles

Platform 0.80

* HttpServer reporting

  We instrumented HttpServer to use the reporting module. HttpServerModule()
  now depends on ReportingModule().

  We added stats broken down by response code and removed a redundant
  CounterStat.

* Units

  We've made a backwards incompatible change to the Duration API to align with
  the DataSize API.  The new Duration code has many new features:

  - Duration remembers the original unit, so parses and prints round trips.
  - toMillis() returns a long so it is easier to use with normal Java APIs.
  - roundTo(TimeUnit) return a long in the specified unit.
  - convertToMostSuccinctTimeUnit() will select the TimeUnit to produce
    the easiest to read value.
  - timeUnitToString(TimeUnit) to get a clean short name for TimeUnits.

  To update to the new api, you will need to:

    toMillis() now returns a long instead of a double
      - Use getValue(MILLISECONDS) for the old behavior.

    toString() returns a string in the original units instead of millis
      - Use toString(MILLISECONDS) for the old behavior.

    convertTo(TimeUnit) has been deprecated and will have an incompatible
    return value in the future.
      - Use getValue(TimeUnit) for the old behavior.
      - Use roundTo(TimeUnit) to get a long in the specified unit.

* We added constructors to TestingHttpClient allowing instances to send
  checked exceptions.

* Reporting (experimental)

  We made refinements to the experimental reporting module.

  - We split ReportingModule in two: ReportingModule is needed in order to
    instrument code and ReportingClientModule is needed to send the data to
    the time series database.

  - reportBinder.bindReportCollection() now requires an additional method call
    to specify the base ObjectName to use in exporting. Either
    .withGeneratedName() or as(String) can be used.

    reportBinder.bindReportCollection(StoreStat.class).withGeneratedName();

* [Bug] Fixed typo breaking Bootstrap.withApplicationDefaults().

* [Bug] JsonTester now uses correctly configured codecs.

Platform 0.79

* HttpClient exception handling

  We have redesigned exception handling in the HttpClient.  In the new design,
  the handle or handleException method of the Response handler should be called
  once per execution.  To make this change we had to make some backwards
  incompatible changes.

  The AsyncHttpClient.executeAsync method now returns a ListenableFuture instead
  of a CheckedFuture.  Any caller that was using the checkedGet() method of
  CheckedFuture will need to change to get() and handle the exceptions or use
  one of the helper methods in Guava Futures.

* Reporting (experimental)

  We added an experimental API for reporting metrics into a KairosDB
  time-series database. The API and its configuration options are subject
  to change.

  - Collecting data

    The @Gauge annotation may be placed on a getter in order to cause the
    attribute to be both reported into the database and exported to JMX. If
    the attribute is not to be exported to JMX, the @Reported annotation may
    be used instead. The getter must return a number or boolean.

    @Nested and @Flatten also work for reporting.

    CounterStat, DistributionStat, and TimeStat have been extended to support
    reporting.

    The newly created Bucketed abstract class may be extended in order to
    implement custom stats objects that support reporting in time buckets.

  - Exporting report objects

    The ReportBinder.export() methods behave like ExportBinder.export() except
    they cause the bound objects to be exported to both reporting and JMX.

    The ReportExporter may be used to dynamically export and unexport objects
    to just reporting.

  - Report collections

    The ReportBinder.bindReportCollection() method may be used to break down
    metrics by one or more keys. For example:

    public interface StoreStat
    {
        CounterStat added(@Key("size") int size,
                          @Key("successful") boolean isSuccessful);
    };

    reportBinder.bindReportCollection(StoreStat.class);

    will bind an implementation of StoreStat. A call to added(10, false) will
    return a CounterStat bound to both reporting and JMX with the name
    "type=StoreStat,name=added,size=10,successful=false".

  - Reporting client

    ReportingModule enables reporting of collected data to the
    time-series database. Configuration parameters are:

    report.uri - The URI of the KairosDB database

    report.tag - A table of additional tag/value pairs to include in all
                 reported data. For example, report.tag.foo=bar will include
                 the additional tag foo=bar

  The sample server has been updated to support reporting.

* Library upgrades
  - jmxutils to 1.14

* [Bug] Futures returned from TestingHttpClient.executeAsync() didn't invoke callbacks.

Platform 0.78

* Rack Packaging

 - Removed generation of gemfile.jar in favour of using Bundler’s standalone. 
 - Changed tar generation to include specific files instead of by exclusion to prevent pulling in unnecessary 
   project files.
 - Incorporated asset precompilation fix 
 - Deprecated use of the bundler maven plugin as it didn’t work correctly or log useful information when it 
   failed. May want to wrap the above changes in a plugin in the future (currently using command lines via Ant 
   plugin).
 
* Rack

 - Added intiialization code to ensure Rails application correctly loads gems from the standalone gem bundle.
 - Fixed an issue in ServletAdapter that assumed status code was always an integer and caused exceptions when 
   it was actually a string
 - Fixed issue that prevented Rails apps from setting more than one cookie at a time. 
 - Re-implemented hack to override logging as a Railtie so it could be correctly scheduled in the application 
   initialization sequence. All Rails apps will now correctly log everything (including startup logging) to 
   launcher.log.
 - Updated/added gems to the test resources to ensure unit tests run correctly (which accounts for most of the 
   file changes)

Platform 0.77

* HttpClient

  - The signature of ResponseHandler.handleException() has changed to:

    T handleException(Request request, Exception exception)
        throws E;

    This permits the method to return a default value.

  - We added a new DefaultingJsonResponseHandler which returns a default
    response upon any error.

* Discovery client service pool default

  Service pools now default to the configured value of 'node.pool'.

* SerialScheduledExecutorService

  We added SerialScheduledExecutorService to the testing module. It is a
  test utility implementation of ScheduledExecutorService. See
  https://github.com/markkent/serial-executor-service for more information.

* Stats

 - MeterStat has been deprecated. DistributionStat should be used insead.

 - TimerStat has been deprecated. The newly created TimeStat should be used
   instead.

 - The Http client and sever RequestStats have been changed to use
   DistributionStat and TimeStat.

* TestingHttpServer now injects a TraceTokenManager, so trace tokens are
  available to other injected modules.

* Library upgrades
  - Netty to 3.6.6.Final

* Maven plugin upgrades
  - build-helper-maven-plugin 1.8
  - maven-assembly-plugin 2.4

* [Bug] Fixed discovery client's inability to refresh services

* [Bug] Fixed missing module in Rack server.

Platform 0.76

* [Bug] Fixed Guice error when binding AsyncHttpClients both normally and privately.

* [Bug] Fixed the Netty http client's handling of exceptions.

Platform 0.75

* Experimental modules

  We removed the trailing "-experimental" from all artifact names.
  Any APIs that are experimental should be annotated with @Beta instead.

* We moved the /v1/jmx/mbean resource to /admin/jmx/mbean on the admin port.

* We removed the jmx-http-rpc-experimental artifact and the JmxHttpRpcModule
  it defined.

* We moved Announcer and ServiceAnnouncement into the
  com.proofpoint.discovery.client.announce package.

* Discovery aware balancing HttpClient

  We added a BalancingHttpClient implementation which takes relative URLs,
  implements discovery lookup, and retries requests.

  To use, bind to a discovery service type:

      DiscoveryBinder.bindDiscoveredHttpClient("storage", StorageClient.class)
          .withFilter(SomeFilter.class)
          .withTracing();

  The resulting HttpClient can be injected in the normal way:

      @Inject
      StorageUser(@StorageClient HttpClient httpClient)

  The resulting HttpClient differs from a classic HttpClient in that it that
  the Request URI must be relative:

      httpClient.execute(prepareGet()
          .setUri(URI.create("v1/content/foo"))
          .build(),
          new StorageResponseHandler());

  The BalancingHttpClient will send the request to some base URI obtained from
  the discovery service for the ServiceType that the HttpClient was bound to
  and for the pool obtained from configuration. If there are no available
  instances, it will throw a ServiceUnavailableException.

  The BalancingHttpClient will retry the request, up to a configurable number
  of total attempts, if the underlying HttpClient reports either an exception
  through ResponseHandler.handleException() or a response with a status code
  of 408, 500, 502, 503, or 504. The server can suppress retries by including
  an "X-Proofpoint-Retry: no" header in its response.

  The ResponseHandler given to the BalancingHttpClient will be called at most
  once. The BalancingHttpClient won't retry if the caller's
  ResponseHandler.handle() method throws an exception.

  The Request and its BodyGenerator may be required to produce their contents
  many times.

  Alternatively, use DiscoveryBinder.bindDiscoveredAsyncHttpClient() to bind
  an AsyncHttpClient.

* We removed support for JSONP and the HTML form of /v1/jmx/mbeans.

* We explicitly specified UTF-8 as the charset for configuration property
  files.

* We renamed ConfigAssertions.assertDeprecatedEquivalence() to
  assertLegacyEquivalence().

* We added TestingHttpClient to simplify testing.

* QuantileDigest

  We made a number of improvements to QuantileDigest. QuantileDigests now support
  negative values, can be serialized/deserialized and merged with other QuantileDigests.

  Important: QuantileDigest is no longer thread-safe, so if you have code that relies
  on this guarantee, you'll need to update it to provide thread-safety at that layer.

* We added a method to TimedStat to time a block using try-with-resources:

    try (BlockTimer ignored = timedStat.time()) {
        ...
    }

* We added an addDiscoveredService(String type, String pool, String uri)
  method to InMemoryDiscoveryClient.

* We changed the discovery client to no longer prefer https instances over
  http instances, but to only use https for any instance that supports both
  schemes.

* We removed support for loading the service inventory over http or https.

* [Bug] Fixed handling of missing content type for JSON http responses.

* We deprecated ConfigAssertions.assertDefaults().

* We upgraded Jackson to 2.2.2 and disabled property mutator inference.

Platform 0.74

* The new launcher status command now reports a running instance of a server
  started by the old launcher

Platform 0.73

* Applications can now use Bootstrap.withApplicationDefaults() to specify
  default configuration values.

* Upon startup, the main thread will no longer wait for the initial discovery
  announcement.

* Launcher fixes

  - Many jvm.config files were depending on the old launcher's interpreting
    spaces and other shell metacharacters. The launcher will now print an
    error message and refuse to start if the jvm.config file contains spaces
    or shell quotes, unless the jvm.config file contains the comment
    "# allow spaces".

  - The new launcher can now shut down a server started by the old launcher.

  - [Bug] The new launcher can now more reliably find the installation directory.

* [Bug] Don't create javadoc on non-release builds.

* Maven plugin upgrades

 - maven-resources-plugin 2.6
 - maven-source-plugin 2.2.1
 - maven-surefire-plugin 2.14

Platform 0.72

Temporarily allow event names to start with lowercase letters, etc.

Platform 0.71

* Log rotation changes

The HTTP request log is now uses the same log rotation semantics as the server
log. The request log rotation is configured using the new
"http-server.log.max-size" and "http-server.log.max-history" configuration
options. The old "http-server.log.retention-time" configuration option is
deprecated and does nothing.

The "log.max-size" configuration option takes a DataSize and replaces the
now-legacy "log.max-size-in-bytes" option.

* Launcher reimplemented in Java

The REST server launcher has been rewritten in Java. Changes include:

 - Fixes numerous race conditions.
 - Implements the force-reload command required by the specification the
   launcher allegedly implements.
 - Removes dependency on Ruby.
 - The launcher waits for the server to finish initialization (return from
   main method) and returns an error status code if initialization fails.
 - The launcher will no longer hang if the server fails to stop.

* BETA: Bootstrap for testing

The Bootstrap class performs may initialization tasks for servers, but when
testing not all installation tasks are desired.  Specifically, the Bootstrap
class loads configuration properties from a file specified using System
property.  The new setConfigurationProperty and setConfigurationProperties
have been added to supply the properties directly.  Another, problematic
task is logging initialization, which can now be disabled with the new
doNotInitializeLogging() method.  For an example of a Bootstrap test see
com.proofpoint.platform.sample.TestServer.

* ValidationAssertions.assertValidates() now returns its argument.

* JsonTester

We created a JsonTester utility class for unit testing JSON encoders and
decoders. JsonTester.assertJsonEncode() asserts that a given object encodes
to an expected JSON strucure. JsonTester.decodeJson returns the result of
decoding a given JSON structure with a given codec. In either case, the
JSON structure is specified as an Object, which can be a String, an Integer,
a Double, a Boolean, null, a List of JSON structures, or a Map of String to
JSON structures.

See TestPersonWithSelf and TestPersonRepresentation in the sample server for
examples of how to use JsonTester.

* Configuration improvements

 - The ConfigurationFactory(Map<String, String> properties) constructor
   (typically used in unit tests) is now strict, requiring all supplied
   properties to be used.
 - Configuration bound inside private binders now works correctly.

* Removal of jax-rs classes from clients

We have replaced all uses of jax-rs classes in clients with classes from Guava
or new classes in the Platform http client. In particular, the HttpHeaders and
MediaType classes in jax-rs has been replaced with HttpHeaders and MediaType
in Guava, and the Status and CacheControl classes have been replaced with
HttpStatus and CacheControl in the Platform http-client. This reduces the size
of clients and avoids some packing problems with the latest jax-rs releases.
Any existing code can continue to use the jax-rs versions of these classes, but
jax-rs is no longer required.

* AsyncHttpClient fixes

 - This release contains a number of fixes for the AsyncHttpClient and additional
   changes to ease debugging of async requests. In some cases the ResponseHandler
   would not be notified of errors with the handleException method, even though
   the future returned from the executeAsync method would be notified of the
   error. To help with debugging, the executeAsync method now returns an
   AsyncHttpResponseFuture which has a new method getState that can be used to
   determine the current state of the http request. This is helpful when requests
   seem to get lost after execution. Finally, we have changed the Netty setup to
   properly name the worker threads, so you can more easily find the http client
   threads.

 - AsyncHttpClient (Netty based) now shares I/O pools by default. To get a
   private IO pool, use withPrivateIoThreadPool() when binding the client.
   The pools running user code are still per-client.

 - AsyncHttpClient.executeAsync() no longer throws E.

* Binding of HTTP static content

We added HttpServerBinder, which binds static resources to be served by the
http server.

* Temporarily allow the characters .:=,- in event names once again.

* Add "X-Content-Type-Options: nosniff" header to all json responses to prevent
  broken browsers from rendering the json as html, which is a potential XSS
  vulnerability

* Dependency changes

com.google.code.findbugs:jsr305 was replaced with
com.google.code.findbugs:annotations

The jsr305 jar contains only the JSR 305 annotations while the
annotations jar also contains additional, Findbugs specific
annotations.

org.eclipse.jetty.orbit:javax.servlet was replaced with
javax.servlet:javax.servlet-api

* Library upgrades

  - Jetty 8.1.10
  - Guava 14.0.1
  - slf4j 1.7.5
  - logback 1.0.11
  - Jersey 1.17.1
  - TestNG 6.8.1

* Internal library upgrades

  - Mockito 1.9.5
  - Hamcrest 1.3
  - jcommander 1.30
  - mysql-connector-java 5.1.24
  - h2 1.3.171
  - Apache httpclient 4.2.4
  - Apache httpcore 4.2.4

* Maven plugin upgrades

  - maven-compiler-plugin 3.0
  - maven-deploy-plugin 2.7
  - maven-duplicate-finder-plugin 1.0.4
  - maven-enforcer-plugin 1.2
  - maven-install-plugin 2.4
  - maven-jar-plugin 2.4
  - maven-javadoc-plugin 2.9

Platform 0.70

* Upgrade Jackson to 2.1.3

Jackson 1.x has been upgraded to 2.1.x. This requires substantial code and
dependency changes as all the artifacts are named differently and all the
classes are in different packages. The upgrade guide has more details:
http://wiki.fasterxml.com/JacksonUpgradeFrom19To20.

The Json module now also supports Jackson Modules (more details at
http://wiki.fasterxml.com/JacksonFeatureModules).

* True async http client

The AsyncHttpClient has been rewritten on top of Netty.  As part of this
work, the AsyncHttpClient has been converted into an interface and the
main implementation is NettyAsyncHttpClient. Additionally, the execute
method has been renamed to executeAsync so the AsyncHttpClient can extend
HttpClient.  The change is to simply replace:

    asyncHttpClient.execute(request, responseHandler);

with:

    asyncHttpClient.executeAsync(request, responseHandler)

The other main change is when using the HttpClientBinder.  The bindAsyncHttpClient
method now binds both an AsyncHttpClient and a HttpClient, so if you were binding
both before, you will need to remove the call to bindHttpClient.

This API remains in BETA, and is subject to additional backwards incompatible
changes.

* Socks proxy support in http client

The new NettyAsyncHttpClient supports connecting to servers through a socks proxy.
This is particularly useful for accessing production servers.  The easiest way
to use this feature is to establish a socks proxy using ssh, as follows:

    ssh -N -D 1080 any.server.running.sshd

Then simply set the HttpClientConfig SocksProxy property either directly in code
or via the following config option:

    myclient.http-client.socks-proxy = localhost:1080

* Pretty-printed JSON

The injected JsonCodecFactory and injected codecs no longer produce
pretty-printed JSON. The previous behavior was a bug. JsonCodecFactory
has a method to return a factory that produces pretty-print codecs.

* Trace token improvements

  - The trace token (and other MDC items) is now included in the server log.
  - The trace token is now included in events.

* Configuration improvements

  - The error message that Configuration issues upon Bean validation failure
    now identifies the attribute's configuration property, if any.

  - Configuration warnings are now sent to the event service upon startup
    and once a day thereafter.

* Disabled auto-detection of constructors and use of getters as setters in
  Jackson.

* The HttpClient and AsyncHttpClients now implement Closeable and properly
  shutdown when used as lifecycle objects. Calling close shuts down the
  connection pool for the underlying Netty HTTP client.

* DataSize and Duration can now be serialized as json

* Library upgrades

  - Upgrade jmxutils to 1.13
  - Upgrade jruby to 1.7.3

* H2 improvements
  - Improve validation of H2EmbeddedDataSource config
  - Allow use of H2 without an init script
  - Enable mvcc support for embedded H2

* Removed deprecated features
  - Support for v1 events has been removed.
  - The EquivalenceTester static check methods have been removed.

* [Bug] HTTPS servers are now announced in discovery using the hostname, not an IP address

* [Bug] Don't throw an exception from http request logger when wall clock time goes backwards.

Platform 0.69

* Library Upgrades

In this release we have upgraded the following dependencies:

    - Guava 13.0.1
    - jetty 8.1.8
    - httpclient 4.2.2
    - bval-jsr303 0.5
    - joda-time 2.1

NOTE: Guava 13 removes transitivity of the JSR-305 artifact (commonly used for @Nullable).
If your project depended on this, you need to add the following to your project's pom.xml file:

    <dependency>
        <groupId>com.google.code.findbugs</groupId>
        <artifactId>jsr305</artifactId>
    </dependency>

* Mappable exception for JSON decoding errors

When there is a JSON decoding error, the JsonMapper.readFrom() method now throws newly defined
exceptions (instead of WebApplicationException). This allows them to be handled by an ExceptionMapper.
The newly defined exceptions are BeanValidationException and JsonMapperParsingException.

* Workaround for InetAddress.getLocalHost() throwing UnrecognizedHostException in Java 7u5 on MacOS

    - The jmx module now gets the default value of the local IP address from the node module.
    - The event-client module tries harder to get the local hostname

* We now detect some incorrect usage to EquivalenceTester.

To detect calls intended for EquivalenceTester<T>.addEquivalentGroup(Iterable<T>) that instead
call EquivalenceTester<Object>.addEquivalentGroup(T, T...), the latter method now prohibits calls
with a single argument that implements Iterable.

* Configuration classes, getters, setters, and default constructors no longer need to be public.

* @ConfigSecuritySensitive now redacts the configuration value in any generated error.

* [Bug] @ConfigMap attributes can now be tested by ConfigAssertions.assertFullMapping() and
  ConfigAssertions.assertDeprecatedEquivalence()

* [Bug] Don't throw exception from StatsRecordingHandler if the system clock goes backwards.

* We have removed the Cassandra module

Platform 0.67

* No thread pool for CounterStat

We changed the CounterStat implementation to use forward decay, which eliminates
the need for a thread pool (and having to manage a thread pool).

* HttpUriBuilder a fluent api for HTTP URIs

Building HTTP URIs using java.net.URI is difficult and error prone, so we added
a simple fluent API for building up HTTP URIs. For example:

    URI uri = uriBuilder()
            .scheme("http")
            .host("www.example.com")
            .port(8081)
            .replacePath("/a/b/c")
            .replaceParameter("k", "1")
            .build();

Additionally, the API can manipulate existing URIs:

    URI uri = HttpUriBuilder.uriBuilderFrom(URI.create("http://www.example.com:8081/?a=apple&b=banana"))
            .replaceParameter("a", "apricot")
            .appendPath("a/b/c")
            .build();

* Bind Jackson key serializers and deserializers in Guice

We've added the ability to bind Jackson key serializers and deserializers with
the JsonBinder.

* Configuration types can now use a fromString method for coercion

The configuration system will look for methods in the following order:

    fromString(String);
    valueOf(String);
    <init>(String);

* Quantile Digest

We've introduced an implementation of Quantile Digests, a data structure for computing approximate
quantile statistics and histograms in sub-linear space with guaranteed error bounds, from the paper
"Medians and Beyond: New Aggregation Techniques for Sensor Networks". It supports
exponentially-decayed counts and can be used to query quantiles and histograms very efficiently.

* DistributionStat

We've deprecated MeterStat in favor of DistributionStat. This new implementation is based on
QuantileDigest and exposes statistically valid percentile metrics at various resolutions
(1/5/15-minute, all time). It's designed to be exported via jmxutil's @Managed annotations.

* @ConfigSecuritySensitive

We created the @ConfigSecuritySensitive annotation for configuration settings such as passwords.
When placed on a @Config setter, prevents the value of the setting from being logged upon startup.

* @ConfigMap

We added support for configuration maps. For example, given the setter:

    @Config("setting")
    @ConfigMap(key = Integer.class, value = Double.class)
    public void setSetting(Map<Integer, Double> value)

the configuration settings:

    setting.1=0.059
    setting.5=2.543

will cause the setter to be called with ImmutableMap.of(1, 0.059, 5, 2.543).

The "key" and "value" arguments both default to String.class and can be any type that the configuration
system can coerce. Furthermore, the "value" argument can be any configuration class. For example,
given a EndpointConfig class with setters annotated with @Config("hostname") and @Config("port"):

    @Config("endpoint")
    @ConfigMap(EndpointConfig.class)
    public void setFruit(Map<String, EndpointConfig> value)

the configuration settings:

    endpoint.foo.hostname=foo.example.com
    endpoint.foo.port=8080
    endpoint.bar.hostname=bar.example.com

will cause the setter to be called with a map with two entries. One entry will have key "foo" and
value an EndpointConfig with host "foo.example.com" and port "8080". The other entry will have key
"bar" and value an EndpointConfig with host "bar.example.com" and a default port.

* Additional error checks in configuration

 - All configuration properties read from a configuration file must be used--Bootstrap.strictConfig()
   now does nothing and is deprecated.
 - Duplicate configuration property keys in a given configuration file now cause an error.
 - Specifying a given configuration setting multiple times (through legacy properties) is now an error,
   even if all the properties use the same string value.

* We removed the restriction of entity bodies to PUT/POST requests that was added in Platform 0.65
* We deprecated unused configuration settings in HTTPEventClient
* We limited the stats to log dependency to test scope

Platform 0.66

* Java 7 is now required

Platform 0.65

* Improvements in unit tests and testing utilities
* Modifications to allow building on Windows
* Restrict entity bodies to PUT/POST requests in HttpClient
* [Bug] Throw correct exception from HttpClient

Platform 0.64

* Fix bug that prevented skeleton server from starting

* Enforce use of HttpClientBinder

The previous way of using HttpClient was to create a new instance of the
HttpClientModule or AsyncHttpClientModule for each client. The recent addition
of filter support added a binding API, HttpClientBinder. The use of this API
is now required. The modules cannot be used directly anymore. Here is an
example of how to use the binder:

    httpClientBinder(binder).bindHttpClient("foo", FooClient.class)
        .withFilter(FirstFilter.class)
        .withFilter(SecondFilter.class);

Here is a simpler example to create a client for use with other platform
services. The client will pass the trace token when making requests:

    httpClientBinder(binder).bindHttpClient("foo", FooClient.class).withTracing();

Platform 0.63

* Fix bug that prevented sample and skeleton servers from starting

Platform 0.62

* Removed all dependencies to Ning's Asynchronous HTTP client

Since http-client-experimental now replaces the usage of Ning's Asynchronous
HTTP client, we've removed all existing references to that package.  Rest
servers that upgrade to 0.62 may need to include it as an explicit dependency
if they don't want to upgrade.

* Cleaned up dependency management

There is now a library project that contains a single parent dependencyManagement
section for all poms to inherit from.  This now includes REST Server Base.  This
ensures that all platform libraries are built with a single set of versions that
produce fully compatible dependency closures with the services that consume them.

* Multiple refactoring commits for readability

There were multiple refactoring efforts to enhance readability.  Some classes that
moved include:
RequestBuilder -> Request.Builder
EchoServlet is a separate class now
MediaType is now available as a class in Guava 12

* Addition of request filter support to HttpClient

HttpClients may now bind in request filters, an example of such can be found by
following the code in com.proofpoint.http.client.TestHttpClientBinder.  This
was added to support having the TraceToken added into outbound http client requests.

* Removal of deprecated JavaUrlHttpClient

* Removal of the experimental module, segmented into separate modules

At this time, we will no longer have a single experimental module, please be aware
of classes that have the @Beta annotation going forward.  Such classes are subject
to backwards incompatible changes.

Platform 0.61

* Upgrade Platform and Rest Server Base pom to Guava 12.0

* Tests for keep alives with ApacheHttpClient

Platform 0.60

* Fixed bug that prevents Rack servers from announcing

Platform 0.59

* Hibernate validator replaced with direct dependency on Apache BVal

We replaced the indirect use of the Hibernate validator with a direct
dependency on Apache BVal. Consequently, the dependency was removed
from the dependencyManagement section of the rest-server-base POM and
should be removed from the POM of any servers or libraries as it is
no longer required by Platform.

* Fixed a bug preventing V1 Events from being able to be used with HttpRequestEvents

* Check for duplicate classes in the dependency closure during builds

Starting at 0.59, any rest-server-base dependent projects will have a build
step added that ensures there are no duplicates of classes or resources on
the classpath.  Any duplicates will trigger a failure of the build and the
build output will include all the problematic classes or resources and which
packages they come from.  Using the dependency:tree build goal can help with
finding these conflicts and resolving them.

* Add JsonEventSerializer for external use

JsonEventSerializer serializes a single event in v2 format using a JsonGenerator.
The existing JsonEventWriter is not easily consumed from external projects.

* Add support for Rack servers to be able to announce with Discovery

Starting with 0.59, the configuration property "rackserver.announcement" will
set the name for the rack server to announce to discovery.  The remaining
configuration to announce with discovery is identical to rest-server-base
parented projects.

Platform 0.58

* Fixed bug that prevents Rack applications from starting

* As of release 0.55, the HttpServerModule has additional dependencies:

 - HttpEventModule
 - DiscoveryModule
 - JsonModule


Platform 0.57

* Fixed bug that prevents ServiceInventory from refreshing periodically

Platform 0.56

* Fixed bug that causes HttpRequestEvents to not be published

Platform 0.55

* In this release we have upgraded the following dependencies

  - Jackson 1.9.5

* HTTP request events

We now record an event for each HTTP request processed.  The HTTP request logging and
new event system now properly support the X-FORWARDED-FOR and X-FORWARDED-PROTO headers.

* Redesigned HTTP client

The existing HTTP client interface has been renamed to AsyncHttpClient and a new synchronous
HTTP client interface has been added in its place.  Additionally, the underlying HTTP client
engine has been replaced with Apache HTTP Components.

The HTTP client is still experimental.


Platform 0.54

This release removed the use of DocLava for generating javadocs for projects rest-server-base. 
It was triggering a bug in javadoc that prevented some projects from building successfully.


Platform 0.53

* In this release we have upgraded the following dependencies

  - Jetty 8.1.1
  - Guava 11.0.2

Jetty 8.0.3 has a bug where connections will leak in CLOSE_WAIT state if clients hang up
prematurely.

* Testing servlet filters

When developing servlet filters for use with the platform HTTP server, it is now possible
to test these filters inside the TestingHttpServer. Bind the TestingHttpServerModule into your
test injector along with the module that binds your servlet filter. 

* Rack packaging (JRuby on Rails)

The rack packaging has been substantially updated with many changes:

  - rewritten launcher that supports the new node config file
  - support only Rails 3.1+ with asset pipeline
  - add support for JMX over HTTP
  - use Bundler to require dependencies when starting application
  - no creation of .bundle directory when packaging gems
  - various bug fixes including PATH_INFO, logging, locking, resources

This release requires Rails 3.1+ rather than supporting arbitrary rack
applications. It also requires the build machine to have a Ruby installation
with all of the application gems installed. This is a temporary restriction
and will be fixed in future releases.

The build process runs "bundle exec rake assets:precompile". Please verify
that this command succeeds before running the build. The following config
change in config/application.rb is likely required to prevent the command
from trying to connect to the configured production database:

  # Only partially load application when precompiling assets
  config.assets.initialize_on_precompile = false

The following config changes are also required for production mode in
config/environments/production.rb:

  # Serve static assets directly from Rails
  config.serve_static_assets = true

  # Enable threaded mode
  config.threadsafe!

Future versions of the rack packaging may configure these automatically.


Platform 0.52

* Admin Http Server thread pool

The thread pool for the admin http server (for jmx over http) listener has been
separated from the main http thread pool to prevent DoS if all http threads in the main
pool get stuck.

The pool size can be controlled via the http-server.admin.threads.min and http-server.admin.threads.max
configuration properties.

* Configurable http client timeouts

Connection and read timeouts for http client are now configurable. For Discovery client, use
discovery.http-client.connect-timeout and discovery.http-client.read-timeout. For Event client,
use event.http-client.connect-timeout and event.http-client.read-timeout.

* Add external address to node info

Added node.external-address property to specify the external address (e.g., Internet routable)
to the JVM. HTTP and JMX services are announced using the existing name and a '-external' name,
so external clients can easily find the server.

Platform 0.51

* Trace token support for http requests

The http server can now deal with request trace tokens passed in via a 
request header (X-Proofpoint-TraceToken). The trace token is recorded
in the request logs and is made available to application code via a
TraceTokenManager object. If no token is provided, a new one is created
automatically.
 
To enable this functionality, simply add a dependency to
com.proofpoint.platform:trace-token and add TraceTokenModule to the list of 
guice modules for your application.

* Event fields support Map and Multimap

In addition to Iterable, the event client now supports event fields of type
java.util.Map and com.google.common.collect.Multimap. The map key type must
be java.lang.String, while the value type can be any standard supported type
or nested type (i.e. any type that is supported by Iterable).


Platform 0.50

* Library Upgrades

In this release we have upgraded the following dependencies

  - Guava 10.0.1
  - TestNG 6.2.1
  - Joda time 2.0
  - CGlib 2.2.2
  - Hibernate validation 4.2.0.Final
  - log4j-over-slf4j 1.6.2
  - Logback 0.9.30

* Log configuration via JMX

Log levels can now be configured via JMX under an mbean named
com.proofpoint.log:name=Logging. Enable this by adding LogJmxModule to your
Guice modules. The AllLevels attribute returns all explicitly configured
loggers (it excludes those with an inherited level).


Platform 0.49, Oct 14th 2011

* Library Upgrades

In this release we have upgraded the following dependencies

  - Jetty 8.0.3
  - Jackson 1.9.1

* Http server critical bugs

There are a number of bugs in versions of Jetty prior to 8.0.3 that can cause
the server to spin in a busy loop when using SSL or leak file descriptors under
certain conditions.

* Admin port

The http-based jmx connector now runs on an alternate admin port to avoid polluting
the request logs and stats when monitoring the server through jmx. For backwards
compatibility, the http listener is bound to a random port. The binding can be
overriden via the http-server.admin.port property and can be turned off via
http-server.admin.enabled.

* Service inventory

Discovery client now finds the location of available discovery servers by calling
out to a service inventory API. The location of the service inventory API is specified
via the service-inventory.uri configuration property and is provided automatically
when deploying with recent snapshot versions of Galaxy.

This feature is experimental, so the old discovery.uri property is still supported.

* PGP signing of artifacts

Projects that inherit from rest-server-base are now automatically signed with PGP on
release. To get this working, the release machine and account needs to have a PGP key
and agent configured.

See http://www.sonatype.com/people/2010/01/how-to-generate-pgp-signatures-with-maven/
for more information.

* Http server request stats

The http server now exposes additional request stats via JMX under an mbean named
com.proofpoint.http:name=RequestStats.

The available stats include:
- Request count
    - Total
    - 1-minute, 5-minute and 15-minute exponentially-weighted moving average requests
      per second
- Bytes Read/Written to connection
    - Total (since server start)
    - Exponentially-weighted per-request mean, min, max, percentiles (50, 90, 99, 99.9)
      with a bias towards the past 5 minutes
    - 1-minute, 5-minute and 15-minute exponentially-weighted moving average bytes
      per second
- Request time (ms)
    - Total (since server start)
    - Exponentially-weighted per-request mean, min, max, percentiles (50, 90, 99, 99.9)
      with a bias towards the past 5 minutes
    - 1-minute, 5-minute and 15-minute exponentially-weighted moving average bytes
      per second

* Http client request stats

Event and discovery clients now expose http request stats via JMX under the
com.proofpoint.discovery.client:name=DiscoveryClient and
com.proofpoint.event.client:name=EventClient mbeans.

The available stats include:
- Request count
    - Total
    - 1-minute, 5-minute and 15-minute exponentially-weighted moving average requests
      per second
- Bytes Read/Written to connection
    - Total (since server start)
    - Exponentially-weighted per-request mean, min, max, percentiles (50, 90, 99, 99.9)
      with a bias towards the past 5 minutes
    - 1-minute, 5-minute and 15-minute exponentially-weighted moving average bytes
      per second
- Request scheduling time (ms) -- time for request to get picked up by an available worker thread.
    - Total (since server start)
    - Exponentially-weighted per-request mean, min, max, percentiles (50, 90, 99, 99.9)
      with a bias towards the past 5 minutes
    - 1-minute, 5-minute and 15-minute exponentially-weighted moving average bytes
      per second
- Scheduling time (ms) -- time for request to get picked up by an available worker thread.
    - Total (since server start)
    - Exponentially-weighted per-request mean, min, max, percentiles (50, 90, 99, 99.9)
      with a bias towards the past 5 minutes
    - 1-minute, 5-minute and 15-minute exponentially-weighted moving average bytes
      per second
- Request time (ms) -- time to send request data to remote server
    - Total (since server start)
    - Exponentially-weighted per-request mean, min, max, percentiles (50, 90, 99, 99.9)
      with a bias towards the past 5 minutes
    - 1-minute, 5-minute and 15-minute exponentially-weighted moving average bytes
      per second
- Response time (ms) -- time to read response
    - Total (since server start)
    - Exponentially-weighted per-request mean, min, max, percentiles (50, 90, 99, 99.9)
      with a bias towards the past 5 minutes
    - 1-minute, 5-minute and 15-minute exponentially-weighted moving average bytes
      per second


Platform 0.48, Oct 5th 2011

* Library Upgrades

In this release we have upgraded the following dependencies

  - Guava 10.0
  - Hector 0.8.0-2
  - Jersey 1.9.1
  - Jetty 8.0.1

Note: we have banned all prior versions of Guava since the former versioning
names are not understood by maven and can result in invalid combinations of
dependencies.

* Jmx over HTTP

One of the major problems we have with supporting our servers in a production
environment is accessing JMX through the firewall.  JMX uses RMI by default
and RMI binds to two random ports, so we can run multiple servers on the same
instance.  This configuration annoyance is compounded by the bidirectional
nature of the RMI protocol.  When an RMI object is published, it encodes the
local address of the server on which the object is running.  In EC2, each
server has a private IP for use within EC2 and a public address which we use for
connecting from out side of EC2.  Since the RMI object can only contain one
address, we must choose between JMX being internally or externally accessible.

We have eliminated both of these problems by writing a HTTP based JMX Remoteing
(JSR 160) connector. To add this to your server, simply add the JmxHttpRpcModule
to the Guice modules.  The following command will connect jvisualvm to the server:

  jvisualvm --cp:a jmx-http-rpc-experimental.jar \
      --openjmx service:jmx:http://<host>:<port>

Note: You must install the VisualVM-MBean plugin to see mbeans in jvisualvm



Platform 0.47, Sept 29th 2011

* EventClient and DiscoveryClient

After running some of our servers under load, we have found major memory leaks
in EventClient and DiscoveryClient due to the AsyncHttpClient.  Unfortunately,
these leaks are difficult to fix due to the complexity of this code base, so we
have replaced the use of AsyncHttpClient in these libraries with the
experimental http client.

* HttpClient

We have written a vastly simplified event client interface that supports only the
features needed by EventClient and DiscoveryClient.  The current
implementation uses java.net.URL internally but we expect this to change.  This
code base is under active development and should not be used outside of the
platform until it is stabilizes.

Platform 0.46, Sept 26th 2011

* Launcher script

This release addresses one of the recent problems we've had with our servers
running in Galaxy.  Galaxy splits the installation directory, which contains
our configuration files, from the data directory where the Java process runs.
This split makes it easy for Galaxy to upgrade servers without losing
persistent server data, but this split means it is impossible for the Java
program to locate configuration files in the installation etc directory.  We
have fixed this problem by having the launcher script symlink the etc
directory from the installation directory into the data directory, so the Java
process can find the configuration using a relative path.


Platform 0.45, Sept 22th 2011

* oss.sonatype.org

We are pleased to announce that starting with this release, all artifacts are
published to Maven Central.  You can search for our artifacts here:

  http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.proofpoint.platform%22

* HttpServer

We have added the request size to the http server log.  The new log line format
follows:

  timeStamp remoteAddress method uri user agent status contentRead contentCount requestTime

As a comparison the previous log line format was:

  timeStamp remoteAddress method uri user agent status contentCount requestTime

Additionally, we have reenabled SSL renegotiation since the underlying JVM bug
has been fixed.

* Launcher script

Starting with this release, the preferred method for passing node specific
information (e.g., id, environment, and pool) to a server is the --node-config
command line option.  The argument to this option must point to a file
containing key-value pairs encoded as 'key=value'.  The properties in this file
are simply added to the Java command line as -D parameters when launching the
server.  Parameters can still be passed to the server using -D parameters on
the launcher, and these will override any parameters in the node config file.

* JRuby on Rails

It is now possible to package a Rails application just like any other Java
platform application.  The packaged application will use the platform http
server, logging, and over time we will extend the integration to support other
platform services.  An instructional guide is currently under review and will
be included soon.


and run rack applications, such as rails, using the
platform http server.  The platform logger is automatically provided to rack and rails, and other
platform facilities can be used from within JRuby.  Simply set
rack-server-base-experimental as your parent pom, and you gain many of the same
features that exist in the rest-server-base parent pom.  An instructional guide is
currently under review and will be included soon.

* Event Client v2

The event client for the event v2 protocol has been mostly rewritten to fix
various bugs and annoyances.  Additionally, we have have expanded the allowed
event fields to include java.util.Iterable and nested simple event types.  For
Iterable, any supported type is allowed for the elements except Iterable.
Nested event types, can be any event type without a special field (e.g.,
timestamp, uuid, or host) since these are only allowed in the envelope
of the protocol.  For a full example see:

  com.proofpoint.event.client.NestedDummyEventClass

* Embedded Cassandra

Cassandra has been upgraded to 0.8.5 which addresses many internal bugs (see
https://svn.apache.org/repos/asf/cassandra/tags/cassandra-0.8.5/CHANGES.txt
for more information).  Additional, work has been on startup reliability and
timeout configuration.

One backwards incompatible change is the default partitioner is now
ByteOrderedPartitioner instead of RandomPartitioner since most of our
application are using range queries.

* AsyncHttpClient

We have upgraded AsyncHttpClient to version 1.6.5, but since this version still
contains a memory leak we have removed it from the event client.  We are
several evaluating long term solutions to the memory leak and hope to have one
implemented in the next release.

* DataSize helper methods

The toBytes() and roundTo(Unit) helper method have been added to DataSize for
easily converting the size to a long.  These methods will throw an exception if
the size is bigger than a long in the specified unit.

* Removed Discovery JDBC

The experimental discovery based JDBC driver has been removed.  This was
originally introduced for supporting database discovery to rails, but this
feature has been rewritten in much simpler pure Ruby.

* Bug fixes
    - System out and err redirect to logging does not flush
    - Fixed race condition in embedded Cassandra lifecycle
    - Fixed error reporting in event client
    - Fixed launcher issues with spawn using 'sh -c' on Linux


Platform 0.44, Sept 22th 2011

* Bad release

Don't use this release, it is bad.

Platform 0.43, Jun 10th 2011

* JRuby on Rails integration

We've started the work support JRuby on Rails in the platform by adding a
servlet based implementation of Rack.  Work will continue in future releases.


* Bug fixes
    - Discovery client fails to reschedule refresh job in some cases




Platform 0.42, May 24th 2011

* Embedded Cassandra and testing utilities

The code is part of the cassandra-experimental module
(com.proofpoint.platform:cassandra-experimental:0.42). The server is enabled by
adding CassandraModule to your Guice injector. Configuration for the server is
encapsulated in CassandraServerConfig. Code that needs to talk to the cassandra
server (e.g., Hector) should depend on CassandraServerInfo, which exposes a
method for obtaining the RPC port that Cassandra listens on.

Here's an example of how to run a simple server with an embedded cassandra instance:


       Bootstrap bootstrap = new Bootstrap(new NodeModule(), new CassandraModule());

       try {
           Injector injector = bootstrap.initialize();
           CassandraServerInfo info = injector.getInstance(CassandraServerInfo.class);
           log.info("Cassandra server listening on port " + info.getRpcPort());
       }
       catch (Throwable e) {
           log.error(e);
           // Cassandra creates non-daemon threads that will prevent the vm from shutting down
           System.exit(1);
       }



We've also added some utilities to simplify unit testing of code that talks to
Cassandra. It is important to keep in mind that due to how Cassandra is
written, there can only be one embedded instance per VM, and it can only be
started once during the lifetime of the VM.

To use Cassandra in unit tests, use CassandraServerSetup to initialize the
embedded instance. This should be done in @BeforeSuite and @AfterSuite methods
that call CassandraServerSetup.tryInitialize() and tryShutdown(), respectively.
It's important that this be done in every class that contains cassandra-based
tests. Otherwise, the initialization code  will only run if you include the
class with these methods in your unit test execution. TryInitialize() and
tryShutdown() are designed to properly handle calls from multiple
@Before/AfterSuite methods.

The server will be bound to a random port which can be obtained through the
CassandraServerInfo object. To get this object use either
CassandraServerSetup.getServerInfo() or TestingCassandraModule if your tests
require Guice.

* DataSize

We've introduced a DataSize class to the experimental module for dealing with
units of data in human-readable form (similar to Duration). It supports B, kB,
MB, GB, TB, PB and can handle conversions between these units. It's also fully
compatible with the configuration system.

* ValidationAssertions

We've also added some utilities to the experimental module to make easier to
test code that uses Bean Validation Framework annotations.
ValidationAssertions.assertValidates() and assertFailsValidation() can be used
to test that an object passes or fails validations as specified by its
annotations. Here's an example on how to use assertFailsValidation():

        assertFailsValidation(config, "maxAge", "may not be null", NotNull.class)

* Bug fixes

The following issues have been fixed:
	- Discovery client fails when consuming static announcements
	- MySQL connection timeouts using the wrong unit (ms vs s)
	- Jar manifest using the wrong file names when building snapshot versions
